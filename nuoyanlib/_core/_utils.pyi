# -*- coding: utf-8 -*-
"""
| ==============================================
|
|   Copyright (c) 2025 Nuoyan
|
|   Author: Nuoyan
|   Email : 1279735247@qq.com
|   Gitee : https://gitee.com/charming-lee
|   Date  : 2025-06-22
|
| ==============================================
"""


from types import MethodType, FunctionType, GeneratorType
from typing import Tuple, TypeVar, Callable, Union, Any, Type, Optional, Dict
from ._types._typing import ITuple


_T_CO = TypeVar("_T_CO", bound=CachedObject)


def try_exec(func: Callable, *args: Any, **kwargs: Any) -> Any: ...
def iter_obj_attrs(obj: Any) -> GeneratorType[Any, None, None]: ...
def get_func(cls: type, module: ITuple, func: ITuple) -> FunctionType: ...
def assert_error(func: Callable, args: tuple, *error: Exception) -> None: ...


class cached_property(object):
    __doc__: Optional[str]
    getter: Callable[[Any], Any]
    def __init__(self, getter: Callable[[Any], Any]) -> None: ...
    def __get__(self, ins: Any, cls: type) -> Any: ...


def join_chr(*seq: int) -> str: ...


class _CachedObjectMeta(type):
    def __new__(metacls, name: str, bases: Tuple[type, ...], dct: Dict[str, Any]) -> _CachedObjectMeta: ...


class CachedObject(metaclass=_CachedObjectMeta):
    __cache__: Dict[tuple, CachedObject]
    def __new__(cls: Type[_T_CO], *args: Any, **kwargs: Any) -> _T_CO: ...
    @classmethod
    def __cache_key__(cls, *args: Any, **kwargs: Any) -> tuple: ...


def hook_method(org_method: MethodType, my_method: MethodType) -> None: ...
def args_type_check(
    *typ: Union[type, Tuple[type, ...]],
    is_method: bool = False
) -> Callable[[Callable], Callable]: ...
def cached_method(method: Callable) -> Callable: ...
def cached_func(func: Callable) -> Callable: ...
def singleton(init_once: Union[bool, type] = True) -> Union[Callable[[type], type], type]: ...
def is_inv36_key(k: str) -> bool: ...
def is_inv27_key(k: str) -> bool: ...
def is_shortcut_key(k: str) -> bool: ...
def is_inv_key(k: str) -> bool: ...
def is_not_inv_key(k: str) -> bool: ...
