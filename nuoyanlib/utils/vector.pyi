# -*- coding: utf-8 -*-
"""
| ==============================================
|
|   Copyright (c) 2025 Nuoyan
|
|   Author: Nuoyan
|   Email : 1279735247@qq.com
|   Gitee : https://gitee.com/charming-lee
|   Date  : 2025-06-05
|
| ==============================================
"""


from typing import Literal, Tuple
from .._core._types._typing import FTuple3, FTuple2, Vector, VectorNoList


def is_zero_vec(vec: Vector) -> bool: ...
def set_vec_length(vec: Vector, length: float, convert_vec: bool = False) -> VectorNoList: ...
def vec_orthogonal_decomposition(
    vec: Vector,
    basis1: Vector,
    basis2: Vector,
    convert_vec: bool = False,
) -> Tuple[VectorNoList, VectorNoList]: ...
def vec_entity_left(entity_id: str, ret_Vector3: bool = False) -> VectorNoList: ...
def vec_entity_right(entity_id: str, ret_Vector3: bool = False) -> VectorNoList: ...
def vec_entity_front(entity_id: str, ignore_y: bool = False, ret_Vector3: bool = False) -> VectorNoList: ...
def vec_entity_back(entity_id: str, ignore_y: bool = False, ret_Vector3: bool = False) -> VectorNoList: ...
def vec_normalize(vec: Vector, convert_vec: bool = False) -> Vector: ...
def vec_rot_p2p(pos1: FTuple3, pos2: FTuple3) -> FTuple2: ...
def vec_p2p(pos1: FTuple3, pos2: FTuple3, ret_Vector3: bool = False) -> VectorNoList: ...
def vec_length(vec: Vector) -> float: ...
def vec_angle(vec1: Vector, vec2: Vector) -> float: ...
def vec_euler_rotate(
    vec: Vector,
    x_angle: float = 0.0,
    y_angle: float = 0.0,
    z_angle: float = 0.0,
    order: Literal["zyx", "zxy", "xyz", "xzy", "yxz", "yzx"] = "zyx",
    convert_vec: bool = False,
) -> Vector: ...
def vec_rotate_around(v: Vector, u: Vector, angle: float, convert_vec: bool = False) -> Vector: ...
def outgoing_vec(vec: Vector, normal: Vector, convert_vec: bool = False) -> Vector: ...
def vec_composite(convert_vec: bool, vec: Vector, *more_vec: Vector) -> Vector: ...
def vec_scale(vec: Vector, scale: float, convert_vec: bool = False) -> Vector: ...
